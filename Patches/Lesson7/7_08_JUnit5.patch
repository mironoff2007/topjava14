Index: src/test/java/ru/javawebinar/topjava/TimingExtension.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/test/java/ru/javawebinar/topjava/TimingExtension.java	(date 1534356532730)
+++ src/test/java/ru/javawebinar/topjava/TimingExtension.java	(date 1534356532730)
@@ -0,0 +1,36 @@
+package ru.javawebinar.topjava;
+
+import org.junit.jupiter.api.extension.*;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import org.springframework.util.StopWatch;
+
+public class TimingExtension implements
+        BeforeTestExecutionCallback, AfterTestExecutionCallback, BeforeAllCallback, AfterAllCallback {
+
+    private static final Logger log = LoggerFactory.getLogger("result");
+
+    private StopWatch stopWatch;
+
+    @Override
+    public void beforeAll(ExtensionContext extensionContext) throws Exception {
+        stopWatch = new StopWatch("Execution time of " + extensionContext.getRequiredTestClass().getSimpleName());
+    }
+
+    @Override
+    public void beforeTestExecution(ExtensionContext extensionContext) throws Exception {
+        log.info("Start stopWatch");
+        stopWatch.start(extensionContext.getDisplayName());
+    }
+
+    @Override
+    public void afterTestExecution(ExtensionContext extensionContext) throws Exception {
+        stopWatch.stop();
+        log.info("stop stopWatch");
+    }
+
+    @Override
+    public void afterAll(ExtensionContext extensionContext) throws Exception {
+        log.info('\n' + stopWatch.prettyPrint() + '\n');
+    }
+}
Index: src/test/java/ru/javawebinar/topjava/TimingRules.java
===================================================================
--- src/test/java/ru/javawebinar/topjava/TimingRules.java	(date 1534340259000)
+++ src/test/java/ru/javawebinar/topjava/TimingRules.java	(date 1534340259000)
@@ -1,41 +0,0 @@
-package ru.javawebinar.topjava;
-
-import org.junit.rules.ExternalResource;
-import org.junit.rules.Stopwatch;
-import org.junit.runner.Description;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import java.util.concurrent.TimeUnit;
-
-public class TimingRules {
-    private static final Logger log = LoggerFactory.getLogger("result");
-
-    private static StringBuilder results = new StringBuilder();
-
-    // http://stackoverflow.com/questions/14892125/what-is-the-best-practice-to-determine-the-execution-time-of-the-bussiness-relev
-    public static final Stopwatch STOPWATCH = new Stopwatch() {
-        @Override
-        protected void finished(long nanos, Description description) {
-            String result = String.format("%-95s %7d", description.getDisplayName(), TimeUnit.NANOSECONDS.toMillis(nanos));
-            results.append(result).append('\n');
-            log.info(result + " ms\n");
-        }
-    };
-
-    public static final ExternalResource SUMMARY = new ExternalResource() {
-        @Override
-        protected void before() throws Throwable {
-            results.setLength(0);
-        }
-
-        @Override
-        protected void after() {
-            log.info("\n-------------------------------------------------------------------------------------------------------" +
-                    "\nTest                                                                                       Duration, ms" +
-                    "\n-------------------------------------------------------------------------------------------------------\n" +
-                    results +
-                    "-------------------------------------------------------------------------------------------------------\n");
-        }
-    };
-}
Index: src/test/java/ru/javawebinar/topjava/service/datajpa/DataJpaUserServiceTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/test/java/ru/javawebinar/topjava/service/datajpa/DataJpaUserServiceTest.java	(date 1534340259000)
+++ src/test/java/ru/javawebinar/topjava/service/datajpa/DataJpaUserServiceTest.java	(date 1534352172742)
@@ -1,26 +1,28 @@
 package ru.javawebinar.topjava.service.datajpa;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.springframework.test.context.ActiveProfiles;
 import ru.javawebinar.topjava.MealTestData;
 import ru.javawebinar.topjava.model.User;
 import ru.javawebinar.topjava.service.AbstractJpaUserServiceTest;
 import ru.javawebinar.topjava.util.exception.NotFoundException;
 
+import static org.junit.jupiter.api.Assertions.assertThrows;
 import static ru.javawebinar.topjava.Profiles.DATAJPA;
 import static ru.javawebinar.topjava.UserTestData.*;
 
 @ActiveProfiles(DATAJPA)
-public class DataJpaUserServiceTest extends AbstractJpaUserServiceTest {
+class DataJpaUserServiceTest extends AbstractJpaUserServiceTest {
     @Test
-    public void testGetWithMeals() throws Exception {
+    void testGetWithMeals() throws Exception {
         User admin = service.getWithMeals(ADMIN_ID);
         assertMatch(admin, ADMIN);
         MealTestData.assertMatch(admin.getMeals(), MealTestData.ADMIN_MEAL2, MealTestData.ADMIN_MEAL1);
     }
 
-    @Test(expected = NotFoundException.class)
-    public void testGetWithMealsNotFound() throws Exception {
-        service.getWithMeals(1);
+    @Test
+    void testGetWithMealsNotFound() throws Exception {
+        assertThrows(NotFoundException.class, () ->
+                service.getWithMeals(1));
     }
 }
\ No newline at end of file
Index: src/test/java/ru/javawebinar/topjava/service/AbstractUserServiceTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/test/java/ru/javawebinar/topjava/service/AbstractUserServiceTest.java	(date 1534340259000)
+++ src/test/java/ru/javawebinar/topjava/service/AbstractUserServiceTest.java	(date 1534351989079)
@@ -1,7 +1,7 @@
 package ru.javawebinar.topjava.service;
 
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.cache.CacheManager;
 import org.springframework.dao.DataAccessException;
@@ -13,6 +13,7 @@
 import java.util.Date;
 import java.util.List;
 
+import static org.junit.jupiter.api.Assertions.assertThrows;
 import static ru.javawebinar.topjava.UserTestData.*;
 
 public abstract class AbstractUserServiceTest extends AbstractServiceTest {
@@ -23,54 +24,57 @@
     @Autowired
     private CacheManager cacheManager;
 
-    @Before
-    public void setUp() throws Exception {
+    @BeforeEach
+    void setUp() throws Exception {
         cacheManager.getCache("users").clear();
     }
 
     @Test
-    public void create() throws Exception {
+    void create() throws Exception {
         User newUser = new User(null, "New", "new@gmail.com", "newPass", 1555, false, new Date(), Collections.singleton(Role.ROLE_USER));
         User created = service.create(new User(newUser));
         newUser.setId(created.getId());
         assertMatch(service.getAll(), ADMIN, newUser, USER);
     }
 
-    @Test(expected = DataAccessException.class)
-    public void duplicateMailCreate() throws Exception {
-        service.create(new User(null, "Duplicate", "user@yandex.ru", "newPass", Role.ROLE_USER));
+    @Test
+    void duplicateMailCreate() throws Exception {
+        assertThrows(DataAccessException.class, () ->
+                service.create(new User(null, "Duplicate", "user@yandex.ru", "newPass", Role.ROLE_USER)));
     }
 
     @Test
-    public void delete() throws Exception {
+    void delete() throws Exception {
         service.delete(USER_ID);
         assertMatch(service.getAll(), ADMIN);
     }
 
-    @Test(expected = NotFoundException.class)
-    public void deletedNotFound() throws Exception {
-        service.delete(1);
-    }
-
     @Test
-    public void get() throws Exception {
+    void deletedNotFound() throws Exception {
+        assertThrows(NotFoundException.class, () ->
+                service.delete(1));
+    }
+
+    @Test
+    void get() throws Exception {
         User user = service.get(ADMIN_ID);
         assertMatch(user, ADMIN);
     }
 
-    @Test(expected = NotFoundException.class)
-    public void getNotFound() throws Exception {
-        service.get(1);
-    }
-
     @Test
-    public void getByEmail() throws Exception {
+    void getNotFound() throws Exception {
+        assertThrows(NotFoundException.class, () ->
+                service.get(1));
+    }
+
+    @Test
+    void getByEmail() throws Exception {
         User user = service.getByEmail("admin@gmail.com");
         assertMatch(user, ADMIN);
     }
 
     @Test
-    public void update() throws Exception {
+    void update() throws Exception {
         User updated = new User(USER);
         updated.setName("UpdatedName");
         updated.setCaloriesPerDay(330);
@@ -80,7 +84,7 @@
     }
 
     @Test
-    public void getAll() throws Exception {
+    void getAll() throws Exception {
         List<User> all = service.getAll();
         assertMatch(all, ADMIN, USER);
     }
Index: src/test/java/ru/javawebinar/topjava/service/jpa/JpaUserServiceTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/test/java/ru/javawebinar/topjava/service/jpa/JpaUserServiceTest.java	(date 1534340259000)
+++ src/test/java/ru/javawebinar/topjava/service/jpa/JpaUserServiceTest.java	(date 1534352172942)
@@ -6,5 +6,5 @@
 import static ru.javawebinar.topjava.Profiles.JPA;
 
 @ActiveProfiles(JPA)
-public class JpaUserServiceTest extends AbstractJpaUserServiceTest {
+class JpaUserServiceTest extends AbstractJpaUserServiceTest {
 }
\ No newline at end of file
Index: src/test/java/ru/javawebinar/topjava/service/jdbc/JdbcMealServiceTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/test/java/ru/javawebinar/topjava/service/jdbc/JdbcMealServiceTest.java	(date 1534340259000)
+++ src/test/java/ru/javawebinar/topjava/service/jdbc/JdbcMealServiceTest.java	(date 1534352172784)
@@ -6,5 +6,5 @@
 import static ru.javawebinar.topjava.Profiles.JDBC;
 
 @ActiveProfiles(JDBC)
-public class JdbcMealServiceTest extends AbstractMealServiceTest {
+class JdbcMealServiceTest extends AbstractMealServiceTest {
 }
\ No newline at end of file
Index: src/test/java/ru/javawebinar/topjava/service/jdbc/JdbcUserServiceTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/test/java/ru/javawebinar/topjava/service/jdbc/JdbcUserServiceTest.java	(date 1534340259000)
+++ src/test/java/ru/javawebinar/topjava/service/jdbc/JdbcUserServiceTest.java	(date 1534352172830)
@@ -6,5 +6,5 @@
 import static ru.javawebinar.topjava.Profiles.JDBC;
 
 @ActiveProfiles(JDBC)
-public class JdbcUserServiceTest extends AbstractUserServiceTest {
+class JdbcUserServiceTest extends AbstractUserServiceTest {
 }
\ No newline at end of file
Index: pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- pom.xml	(date 1534340259000)
+++ pom.xml	(date 1534348529977)
@@ -27,7 +27,8 @@
         <!--DB-->
         <postgresql.version>42.2.2</postgresql.version>
         <!--    Tests  -->
-        <junit.version>4.12</junit.version>
+        <junit.jupiter.version>5.2.0</junit.jupiter.version>
+        <junit.platform.version>1.2.0</junit.platform.version>
         <hamcrest.version>1.3</hamcrest.version>
 
         <!-- Hibernate -->
@@ -59,6 +60,13 @@
                 <configuration>
                     <argLine>-Dfile.encoding=UTF-8</argLine>
                 </configuration>
+                <dependencies>
+                    <dependency>
+                        <groupId>org.junit.platform</groupId>
+                        <artifactId>junit-platform-surefire-provider</artifactId>
+                        <version>${junit.platform.version}</version>
+                    </dependency>
+                </dependencies>
             </plugin>
 
             <!--  http://stackoverflow.com/questions/4305935/is-it-possible-to-supply-tomcat6s-context-xml-file-via-the-maven-cargo-plugin#4417945 -->
@@ -219,17 +227,12 @@
 
         <!--Test-->
         <dependency>
-            <groupId>junit</groupId>
-            <artifactId>junit</artifactId>
-            <version>${junit.version}</version>
+            <groupId>org.junit.jupiter</groupId>
+            <artifactId>junit-jupiter-engine</artifactId>
+            <version>${junit.jupiter.version}</version>
             <scope>test</scope>
-            <exclusions>
-                <exclusion>
-                    <artifactId>hamcrest-core</artifactId>
-                    <groupId>org.hamcrest</groupId>
-                </exclusion>
-            </exclusions>
         </dependency>
+
         <dependency>
             <groupId>org.hamcrest</groupId>
             <artifactId>hamcrest-all</artifactId>
Index: src/test/java/ru/javawebinar/topjava/service/datajpa/DataJpaMealServiceTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/test/java/ru/javawebinar/topjava/service/datajpa/DataJpaMealServiceTest.java	(date 1534340259000)
+++ src/test/java/ru/javawebinar/topjava/service/datajpa/DataJpaMealServiceTest.java	(date 1534352172691)
@@ -1,27 +1,29 @@
 package ru.javawebinar.topjava.service.datajpa;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.springframework.test.context.ActiveProfiles;
 import ru.javawebinar.topjava.UserTestData;
 import ru.javawebinar.topjava.model.Meal;
 import ru.javawebinar.topjava.service.AbstractMealServiceTest;
 import ru.javawebinar.topjava.util.exception.NotFoundException;
 
+import static org.junit.jupiter.api.Assertions.assertThrows;
 import static ru.javawebinar.topjava.MealTestData.*;
 import static ru.javawebinar.topjava.Profiles.DATAJPA;
 import static ru.javawebinar.topjava.UserTestData.ADMIN_ID;
 
 @ActiveProfiles(DATAJPA)
-public class DataJpaMealServiceTest extends AbstractMealServiceTest {
+class DataJpaMealServiceTest extends AbstractMealServiceTest {
     @Test
-    public void testGetWithUser() throws Exception {
+    void testGetWithUser() throws Exception {
         Meal adminMeal = service.getWithUser(ADMIN_MEAL_ID, ADMIN_ID);
         assertMatch(adminMeal, ADMIN_MEAL1);
         UserTestData.assertMatch(adminMeal.getUser(), UserTestData.ADMIN);
     }
 
-    @Test(expected = NotFoundException.class)
-    public void testGetWithUserNotFound() throws Exception {
-        service.getWithUser(MEAL1_ID, ADMIN_ID);
+    @Test
+    void testGetWithUserNotFound() throws Exception {
+        assertThrows(NotFoundException.class, () ->
+                service.getWithUser(MEAL1_ID, ADMIN_ID));
     }
 }
Index: src/test/java/ru/javawebinar/topjava/web/RootControllerTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/test/java/ru/javawebinar/topjava/web/RootControllerTest.java	(date 1534340259000)
+++ src/test/java/ru/javawebinar/topjava/web/RootControllerTest.java	(date 1534352173100)
@@ -1,6 +1,6 @@
 package ru.javawebinar.topjava.web;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import static org.hamcrest.Matchers.*;
 import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
@@ -9,10 +9,10 @@
 import static ru.javawebinar.topjava.UserTestData.USER;
 import static ru.javawebinar.topjava.model.AbstractBaseEntity.START_SEQ;
 
-public class RootControllerTest extends AbstractControllerTest {
+class RootControllerTest extends AbstractControllerTest {
 
     @Test
-    public void testUsers() throws Exception {
+    void testUsers() throws Exception {
         mockMvc.perform(get("/users"))
                 .andDo(print())
                 .andExpect(status().isOk())
Index: src/test/java/ru/javawebinar/topjava/web/AbstractControllerTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/test/java/ru/javawebinar/topjava/web/AbstractControllerTest.java	(date 1534340259000)
+++ src/test/java/ru/javawebinar/topjava/web/AbstractControllerTest.java	(date 1534358196234)
@@ -1,13 +1,10 @@
 package ru.javawebinar.topjava.web;
 
-import org.junit.Before;
-import org.junit.runner.RunWith;
+import org.junit.jupiter.api.BeforeEach;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.cache.CacheManager;
 import org.springframework.test.context.ActiveProfiles;
-import org.springframework.test.context.ContextConfiguration;
-import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
-import org.springframework.test.context.web.WebAppConfiguration;
+import org.springframework.test.context.junit.jupiter.web.SpringJUnitWebConfig;
 import org.springframework.test.web.servlet.MockMvc;
 import org.springframework.test.web.servlet.setup.MockMvcBuilders;
 import org.springframework.transaction.annotation.Transactional;
@@ -19,13 +16,13 @@
 
 import javax.annotation.PostConstruct;
 
-@ContextConfiguration({
+@SpringJUnitWebConfig(locations = {
         "classpath:spring/spring-app.xml",
         "classpath:spring/spring-mvc.xml",
         "classpath:spring/spring-db.xml"
 })
-@WebAppConfiguration
-@RunWith(SpringJUnit4ClassRunner.class)
+//@WebAppConfiguration
+//@ExtendWith(SpringExtension.class)
 @Transactional
 @ActiveProfiles(resolver = AllActiveProfileResolver.class)
 abstract public class AbstractControllerTest {
@@ -59,8 +56,8 @@
                 .build();
     }
 
-    @Before
-    public void setUp() {
+    @BeforeEach
+    void setUp() {
         cacheManager.getCache("users").clear();
         if (jpaUtil != null) {
             jpaUtil.clear2ndLevelHibernateCache();
Index: src/test/java/ru/javawebinar/topjava/service/AbstractJpaUserServiceTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/test/java/ru/javawebinar/topjava/service/AbstractJpaUserServiceTest.java	(date 1534340259000)
+++ src/test/java/ru/javawebinar/topjava/service/AbstractJpaUserServiceTest.java	(date 1534352173030)
@@ -1,7 +1,7 @@
 package ru.javawebinar.topjava.service;
 
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 import org.springframework.beans.factory.annotation.Autowired;
 import ru.javawebinar.topjava.model.Role;
 import ru.javawebinar.topjava.model.User;
@@ -16,15 +16,15 @@
     @Autowired
     private JpaUtil jpaUtil;
 
-    @Before
+    @BeforeEach
     @Override
-    public void setUp() throws Exception {
+    void setUp() throws Exception {
         super.setUp();
         jpaUtil.clear2ndLevelHibernateCache();
     }
 
     @Test
-    public void testValidation() throws Exception {
+    void testValidation() throws Exception {
         validateRootCause(() -> service.create(new User(null, "  ", "mail@yandex.ru", "password", Role.ROLE_USER)), ConstraintViolationException.class);
         validateRootCause(() -> service.create(new User(null, "User", "  ", "password", Role.ROLE_USER)), ConstraintViolationException.class);
         validateRootCause(() -> service.create(new User(null, "User", "mail@yandex.ru", "  ", Role.ROLE_USER)), ConstraintViolationException.class);
Index: src/test/java/ru/javawebinar/topjava/service/AbstractServiceTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/test/java/ru/javawebinar/topjava/service/AbstractServiceTest.java	(date 1534340259000)
+++ src/test/java/ru/javawebinar/topjava/service/AbstractServiceTest.java	(date 1534361743127)
@@ -1,64 +1,51 @@
 package ru.javawebinar.topjava.service;
 
-import org.junit.Assert;
-import org.junit.ClassRule;
-import org.junit.Rule;
-import org.junit.rules.ExpectedException;
-import org.junit.rules.ExternalResource;
-import org.junit.rules.Stopwatch;
-import org.junit.runner.RunWith;
+import org.junit.jupiter.api.extension.ExtendWith;
 import org.slf4j.bridge.SLF4JBridgeHandler;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.core.env.Environment;
 import org.springframework.test.context.ActiveProfiles;
-import org.springframework.test.context.ContextConfiguration;
 import org.springframework.test.context.jdbc.Sql;
 import org.springframework.test.context.jdbc.SqlConfig;
-import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
+import org.springframework.test.context.junit.jupiter.SpringJUnitConfig;
 import ru.javawebinar.topjava.ActiveDbProfileResolver;
 import ru.javawebinar.topjava.Profiles;
-import ru.javawebinar.topjava.TimingRules;
+import ru.javawebinar.topjava.TimingExtension;
 
-import static org.hamcrest.CoreMatchers.instanceOf;
+import static org.junit.jupiter.api.Assertions.assertThrows;
 import static ru.javawebinar.topjava.util.ValidationUtil.getRootCause;
 
-@ContextConfiguration({
+@SpringJUnitConfig(locations = {
         "classpath:spring/spring-app.xml",
         "classpath:spring/spring-db.xml"
 })
-@RunWith(SpringJUnit4ClassRunner.class)
+//@ExtendWith(SpringExtension.class)
 @ActiveProfiles(resolver = ActiveDbProfileResolver.class)
 @Sql(scripts = "classpath:db/populateDB.sql", config = @SqlConfig(encoding = "UTF-8"))
-abstract public class AbstractServiceTest {
-    @ClassRule
-    public static ExternalResource summary = TimingRules.SUMMARY;
-
-    @Rule
-    public Stopwatch stopwatch = TimingRules.STOPWATCH;
+@ExtendWith(TimingExtension.class)
+abstract class AbstractServiceTest {
 
     @Autowired
-    public Environment env;
-
-    @Rule
-    public ExpectedException thrown = ExpectedException.none();
+    private Environment env;
 
     static {
         // needed only for java.util.logging (postgres driver)
         SLF4JBridgeHandler.install();
     }
 
-    public boolean isJpaBased() {
+    boolean isJpaBased() {
 //        return Arrays.stream(env.getActiveProfiles()).noneMatch(Profiles.JDBC::equals);
         return env.acceptsProfiles(Profiles.JPA, Profiles.DATAJPA);
     }
 
     //  Check root cause in JUnit: https://github.com/junit-team/junit4/pull/778
-    public <T extends Throwable> void validateRootCause(Runnable runnable, Class<T> exceptionClass) {
-        try {
-            runnable.run();
-            Assert.fail("Expected " + exceptionClass.getName());
-        } catch (Exception e) {
-            Assert.assertThat(getRootCause(e), instanceOf(exceptionClass));
-        }
+    <T extends Throwable> void validateRootCause(Runnable runnable, Class<T> exceptionClass) {
+        assertThrows(exceptionClass, () -> {
+            try {
+                runnable.run();
+            } catch (Exception e) {
+                throw getRootCause(e);
+            }
+        });
     }
 }
\ No newline at end of file
Index: src/test/java/ru/javawebinar/topjava/service/jpa/JpaMealServiceTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/test/java/ru/javawebinar/topjava/service/jpa/JpaMealServiceTest.java	(date 1534340259000)
+++ src/test/java/ru/javawebinar/topjava/service/jpa/JpaMealServiceTest.java	(date 1534352172873)
@@ -6,5 +6,5 @@
 import static ru.javawebinar.topjava.Profiles.JPA;
 
 @ActiveProfiles(JPA)
-public class JpaMealServiceTest extends AbstractMealServiceTest {
+class JpaMealServiceTest extends AbstractMealServiceTest {
 }
\ No newline at end of file
Index: src/test/java/ru/javawebinar/topjava/web/InMemoryAdminRestControllerSpringTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/test/java/ru/javawebinar/topjava/web/InMemoryAdminRestControllerSpringTest.java	(date 1534340259000)
+++ src/test/java/ru/javawebinar/topjava/web/InMemoryAdminRestControllerSpringTest.java	(date 1534363199898)
@@ -1,12 +1,9 @@
 package ru.javawebinar.topjava.web;
 
-import org.junit.Assert;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.test.context.ContextConfiguration;
-import org.springframework.test.context.junit4.SpringRunner;
+import org.springframework.test.context.junit.jupiter.SpringJUnitConfig;
 import ru.javawebinar.topjava.UserTestData;
 import ru.javawebinar.topjava.model.User;
 import ru.javawebinar.topjava.repository.mock.InMemoryUserRepositoryImpl;
@@ -15,11 +12,12 @@
 
 import java.util.Collection;
 
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertThrows;
 import static ru.javawebinar.topjava.UserTestData.ADMIN;
 
-@ContextConfiguration({"classpath:spring/spring-app.xml", "classpath:spring/mock.xml"})
-@RunWith(SpringRunner.class)
-public class InMemoryAdminRestControllerSpringTest {
+@SpringJUnitConfig(locations = {"classpath:spring/spring-app.xml", "classpath:spring/mock.xml"})
+class InMemoryAdminRestControllerSpringTest {
 
     @Autowired
     private AdminRestController controller;
@@ -27,21 +25,22 @@
     @Autowired
     private InMemoryUserRepositoryImpl repository;
 
-    @Before
-    public void setUp() throws Exception {
+    @BeforeEach
+    void setUp() throws Exception {
         repository.init();
     }
 
     @Test
-    public void delete() throws Exception {
+    void testDelete() throws Exception {
         controller.delete(UserTestData.USER_ID);
         Collection<User> users = controller.getAll();
-        Assert.assertEquals(users.size(), 1);
-        Assert.assertEquals(users.iterator().next(), ADMIN);
+        assertEquals(users.size(), 1);
+        assertEquals(users.iterator().next(), ADMIN);
     }
 
-    @Test(expected = NotFoundException.class)
-    public void deleteNotFound() throws Exception {
-        controller.delete(10);
+    @Test
+    void testDeleteNotFound() throws Exception {
+        assertThrows(NotFoundException.class, () ->
+                controller.delete(10));
     }
 }
Index: src/test/java/ru/javawebinar/topjava/web/InMemoryAdminRestControllerTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/test/java/ru/javawebinar/topjava/web/InMemoryAdminRestControllerTest.java	(date 1534340259000)
+++ src/test/java/ru/javawebinar/topjava/web/InMemoryAdminRestControllerTest.java	(date 1534363199945)
@@ -1,6 +1,9 @@
 package ru.javawebinar.topjava.web;
 
-import org.junit.*;
+import org.junit.jupiter.api.AfterAll;
+import org.junit.jupiter.api.BeforeAll;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 import org.springframework.context.ConfigurableApplicationContext;
 import org.springframework.context.support.ClassPathXmlApplicationContext;
 import ru.javawebinar.topjava.UserTestData;
@@ -12,43 +15,46 @@
 import java.util.Arrays;
 import java.util.Collection;
 
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertThrows;
 import static ru.javawebinar.topjava.UserTestData.ADMIN;
 
-public class InMemoryAdminRestControllerTest {
+class InMemoryAdminRestControllerTest {
     private static ConfigurableApplicationContext appCtx;
     private static AdminRestController controller;
 
-    @BeforeClass
-    public static void beforeClass() {
+    @BeforeAll
+    static void beforeClass() {
         appCtx = new ClassPathXmlApplicationContext("spring/spring-app.xml", "spring/mock.xml");
         System.out.println("\n" + Arrays.toString(appCtx.getBeanDefinitionNames()) + "\n");
         controller = appCtx.getBean(AdminRestController.class);
     }
 
-    @AfterClass
-    public static void afterClass() {
+    @AfterAll
+    static void afterClass() {
 //        May cause during JUnit "Cache is not alive (STATUS_SHUTDOWN)" as JUnit share Spring context for speed
 //        http://stackoverflow.com/questions/16281802/ehcache-shutdown-causing-an-exception-while-running-test-suite
 //        appCtx.close();
     }
 
-    @Before
-    public void setUp() throws Exception {
+    @BeforeEach
+    void setUp() throws Exception {
         // re-initialize
         InMemoryUserRepositoryImpl repository = appCtx.getBean(InMemoryUserRepositoryImpl.class);
         repository.init();
     }
 
     @Test
-    public void delete() throws Exception {
+    void delete() throws Exception {
         controller.delete(UserTestData.USER_ID);
         Collection<User> users = controller.getAll();
-        Assert.assertEquals(users.size(), 1);
-        Assert.assertEquals(users.iterator().next(), ADMIN);
+        assertEquals(users.size(), 1);
+        assertEquals(users.iterator().next(), ADMIN);
     }
 
-    @Test(expected = NotFoundException.class)
-    public void deleteNotFound() throws Exception {
-        controller.delete(10);
+    @Test
+    void deleteNotFound() throws Exception {
+        assertThrows(NotFoundException.class, () ->
+                controller.delete(10));
     }
 }
\ No newline at end of file
Index: src/test/java/ru/javawebinar/topjava/service/AbstractMealServiceTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/test/java/ru/javawebinar/topjava/service/AbstractMealServiceTest.java	(date 1534340259000)
+++ src/test/java/ru/javawebinar/topjava/service/AbstractMealServiceTest.java	(date 1534353521500)
@@ -1,7 +1,7 @@
 package ru.javawebinar.topjava.service;
 
-import org.junit.Assume;
-import org.junit.Test;
+import org.junit.jupiter.api.Assumptions;
+import org.junit.jupiter.api.Test;
 import org.springframework.beans.factory.annotation.Autowired;
 import ru.javawebinar.topjava.model.Meal;
 import ru.javawebinar.topjava.util.exception.NotFoundException;
@@ -11,6 +11,8 @@
 import java.time.Month;
 
 import static java.time.LocalDateTime.of;
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertThrows;
 import static ru.javawebinar.topjava.MealTestData.*;
 import static ru.javawebinar.topjava.UserTestData.ADMIN_ID;
 import static ru.javawebinar.topjava.UserTestData.USER_ID;
@@ -21,65 +23,64 @@
     protected MealService service;
 
     @Test
-    public void delete() throws Exception {
+    void delete() throws Exception {
         service.delete(MEAL1_ID, USER_ID);
         assertMatch(service.getAll(USER_ID), MEAL6, MEAL5, MEAL4, MEAL3, MEAL2);
     }
 
     @Test
-    public void deleteNotFound() throws Exception {
-        thrown.expect(NotFoundException.class);
-        service.delete(MEAL1_ID, 1);
+    void deleteNotFound() throws Exception {
+        assertThrows(NotFoundException.class, () ->
+                service.delete(MEAL1_ID, 1));
     }
 
     @Test
-    public void create() throws Exception {
+    void create() throws Exception {
         Meal created = getCreated();
         service.create(created, USER_ID);
         assertMatch(service.getAll(USER_ID), created, MEAL6, MEAL5, MEAL4, MEAL3, MEAL2, MEAL1);
     }
 
     @Test
-    public void get() throws Exception {
+    void get() throws Exception {
         Meal actual = service.get(ADMIN_MEAL_ID, ADMIN_ID);
         assertMatch(actual, ADMIN_MEAL1);
     }
 
     @Test
-    public void getNotFound() throws Exception {
-        thrown.expect(NotFoundException.class);
-        service.get(MEAL1_ID, ADMIN_ID);
+    void getNotFound() throws Exception {
+        assertThrows(NotFoundException.class, () ->
+                service.get(MEAL1_ID, ADMIN_ID));
     }
 
     @Test
-    public void update() throws Exception {
+    void update() throws Exception {
         Meal updated = getUpdated();
         service.update(updated, USER_ID);
         assertMatch(service.get(MEAL1_ID, USER_ID), updated);
     }
 
     @Test
-    public void updateNotFound() throws Exception {
-        thrown.expect(NotFoundException.class);
-        thrown.expectMessage("Not found entity with id=" + MEAL1_ID);
-        service.update(MEAL1, ADMIN_ID);
+    void updateNotFound() throws Exception {
+        NotFoundException e = assertThrows(NotFoundException.class, () -> service.update(MEAL1, ADMIN_ID));
+        assertEquals(e.getMessage(), "Not found entity with id=" + MEAL1_ID);
     }
 
     @Test
-    public void getAll() throws Exception {
+    void getAll() throws Exception {
         assertMatch(service.getAll(USER_ID), MEALS);
     }
 
     @Test
-    public void getBetween() throws Exception {
+    void getBetween() throws Exception {
         assertMatch(service.getBetweenDates(
                 LocalDate.of(2015, Month.MAY, 30),
                 LocalDate.of(2015, Month.MAY, 30), USER_ID), MEAL3, MEAL2, MEAL1);
     }
 
     @Test
-    public void testValidation() throws Exception {
-        Assume.assumeTrue(isJpaBased());
+    void testValidation() throws Exception {
+        Assumptions.assumeTrue(isJpaBased(), "JPA not supported");
         validateRootCause(() -> service.create(new Meal(null, of(2015, Month.JUNE, 1, 18, 0), "  ", 300), USER_ID), ConstraintViolationException.class);
         validateRootCause(() -> service.create(new Meal(null, null, "Description", 300), USER_ID), ConstraintViolationException.class);
         validateRootCause(() -> service.create(new Meal(null, of(2015, Month.JUNE, 1, 18, 0), "Description", 9), USER_ID), ConstraintViolationException.class);
